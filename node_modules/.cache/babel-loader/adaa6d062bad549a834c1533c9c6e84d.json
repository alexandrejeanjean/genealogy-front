{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/dev/genealogy-front/src/store/UserProvider.tsx\";\nimport React, { createContext, Component } from \"react\"; // on importe createContext qui servira à la création d'un ou plusieurs contextes\n\n/**\n * `createContext` contient 2 propriétés :\n * `Provider` et `Consumer`. Nous les rendons accessibles\n * via la constante `UserContext` et on initialise une\n * propriété par défaut \"name\" qui sera une chaîne vide.\n * On exporte ce contexte afin qu'il soit exploitable par\n * d'autres composants par la suite via le `Consumer`\n */\n\nexport const UserContext = createContext({\n  isLogged: false,\n  setIsLogged: () => {}\n});\n/**\n * la classe UserProvider fera office de... Provider (!)\n * en englobant son enfant direct\n * dans le composant éponyme. De cette façon, ses values\n * seront accessibles de manière globale via le `Consumer`\n */\n\nclass UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLogged: false,\n      setIsLogged: status => this.setState({\n        isLogged: status\n      })\n    };\n  }\n\n  render() {\n    return (\n      /**\n       * la propriété value est très importante ici, elle rend\n       * le contenu du state disponible aux `Consumers` de l'application\n       */\n      React.createElement(UserContext.Provider, {\n        value: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, this.props.children)\n    );\n  }\n\n}\n\nexport default UserProvider;","map":{"version":3,"sources":["/Users/alex/Documents/dev/genealogy-front/src/store/UserProvider.tsx"],"names":["React","createContext","Component","UserContext","isLogged","setIsLogged","UserProvider","state","status","setState","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD,C,CAAyD;;AAEzD;;;;;;;;;AAQA,OAAO,MAAMC,WAAW,GAAGF,aAAa,CAAC;AACvCG,EAAAA,QAAQ,EAAE,KAD6B;AAEvCC,EAAAA,WAAW,EAAE,MAAM,CAAE;AAFkB,CAAD,CAAjC;AAKP;;;;;;;AAMA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCK,KADmC,GAC3B;AACNH,MAAAA,QAAQ,EAAE,KADJ;AAENC,MAAAA,WAAW,EAAGG,MAAD,IAAqB,KAAKC,QAAL,CAAc;AAACL,QAAAA,QAAQ,EAAEI;AAAX,OAAd;AAF5B,KAD2B;AAAA;;AAMnCE,EAAAA,MAAM,GAAG;AACP;AACE;;;;AAIA,0BAAC,WAAD,CAAa,QAAb;AAAsB,QAAA,KAAK,EAAE,KAAKH,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKI,KAAL,CAAWC,QADd;AALF;AASD;;AAhBkC;;AAmBrC,eAAeN,YAAf","sourcesContent":["import React, { createContext, Component } from \"react\"; // on importe createContext qui servira à la création d'un ou plusieurs contextes\n\n/**\n * `createContext` contient 2 propriétés :\n * `Provider` et `Consumer`. Nous les rendons accessibles\n * via la constante `UserContext` et on initialise une\n * propriété par défaut \"name\" qui sera une chaîne vide.\n * On exporte ce contexte afin qu'il soit exploitable par\n * d'autres composants par la suite via le `Consumer`\n */\nexport const UserContext = createContext({\n  isLogged: false,\n  setIsLogged: () => {}\n});\n\n/**\n * la classe UserProvider fera office de... Provider (!)\n * en englobant son enfant direct\n * dans le composant éponyme. De cette façon, ses values\n * seront accessibles de manière globale via le `Consumer`\n */\nclass UserProvider extends Component {\n  state = {\n    isLogged: false, \n    setIsLogged: (status: boolean) => this.setState({isLogged: status})\n  };\n\n  render() {\n    return (\n      /**\n       * la propriété value est très importante ici, elle rend\n       * le contenu du state disponible aux `Consumers` de l'application\n       */\n      <UserContext.Provider value={this.state}>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\n\nexport default UserProvider;\n"]},"metadata":{},"sourceType":"module"}