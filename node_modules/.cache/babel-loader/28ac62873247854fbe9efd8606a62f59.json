{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/dev/genealogy-front/src/Routes.tsx\";\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport React from 'react';\nimport Login from './Screens/Login';\nimport Dashboard from './Screens/Dashboard';\nimport PageNotFound from './Screens/NotFound';\nimport { withUser } from './store/UserProvider';\n\nconst PrivateRoute = ({\n  component,\n  isAuthenticated,\n  ...rest\n}) => {\n  const routeComponent = props => isAuthenticated ? React.createElement(component, props) : React.createElement(Redirect, {\n    to: {\n      pathname: '/'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  });\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: routeComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }));\n};\n\nconst Routes = ({\n  isLogged\n}) => React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, React.createElement(Route, {\n  exact: true,\n  path: \"/\",\n  component: Login,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}), React.createElement(PrivateRoute, {\n  exact: true,\n  path: \"/dashboard\",\n  component: Dashboard,\n  isAuthenticated: isLogged,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}), React.createElement(Route, {\n  component: PageNotFound,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}));\n\nexport default withUser(Routes);","map":{"version":3,"sources":["/Users/alex/Documents/dev/genealogy-front/src/Routes.tsx"],"names":["Route","Switch","Redirect","React","Login","Dashboard","PageNotFound","withUser","PrivateRoute","component","isAuthenticated","rest","routeComponent","props","createElement","pathname","Routes","isLogged"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAASC,QAAT,QAAyB,sBAAzB;;AASA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,eAAb;AAA8B,KAAGC;AAAjC,CAAD,KAA2D;AAC9E,QAAMC,cAAc,GAAIC,KAAD,IACrBH,eAAe,GAAGP,KAAK,CAACW,aAAN,CAAoBL,SAApB,EAA+BI,KAA/B,CAAH,GAA2C,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD5D;;AAEA,SAAO,oBAAC,KAAD,oBAAWJ,IAAX;AAAiB,IAAA,MAAM,EAAEC,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAJD;;AAWA,MAAMI,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACb,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,KAAD;AAAO,EAAA,KAAK,MAAZ;AAAa,EAAA,IAAI,EAAC,GAAlB;AAAsB,EAAA,SAAS,EAAEb,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,oBAAC,YAAD;AAAc,EAAA,KAAK,MAAnB;AAAoB,EAAA,IAAI,EAAC,YAAzB;AAAsC,EAAA,SAAS,EAAEC,SAAjD;AAA4D,EAAA,eAAe,EAAEY,QAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,EAGE,oBAAC,KAAD;AAAO,EAAA,SAAS,EAAEX,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,CADF;;AAQA,eAAeC,QAAQ,CAACS,MAAD,CAAvB","sourcesContent":["import { Route, Switch, Redirect } from 'react-router-dom';\nimport React from 'react';\nimport Login from './Screens/Login';\nimport Dashboard from './Screens/Dashboard';\nimport PageNotFound from './Screens/NotFound';\nimport { withUser } from './store/UserProvider';\n\ntype PRoutesProps = {\n  exact: boolean;\n  path: string;\n  component: React.FC;\n  isAuthenticated: boolean;\n};\n\nconst PrivateRoute = ({ component, isAuthenticated, ...rest }: PRoutesProps) => {\n  const routeComponent = (props: any) =>\n    isAuthenticated ? React.createElement(component, props) : <Redirect to={{ pathname: '/' }} />;\n  return <Route {...rest} render={routeComponent} />;\n};\n\ntype RoutesProps = {\n  isLogged: boolean;\n  setIsLogged: Function\n};\n\nconst Routes = ({ isLogged }: RoutesProps) => (\n  <Switch>\n    <Route exact path=\"/\" component={Login} />\n    <PrivateRoute exact path=\"/dashboard\" component={Dashboard} isAuthenticated={isLogged} />\n    <Route component={PageNotFound} />\n  </Switch>\n);\n\nexport default withUser(Routes);\n"]},"metadata":{},"sourceType":"module"}