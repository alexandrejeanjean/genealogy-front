{"version":3,"sources":["SharedComponents/Loading/LoadingLazyPage.tsx","core/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx","store/UserProvider.tsx"],"names":["Loading","className","type","color","height","width","timeout","Login","React","lazy","Family","Dashboard","PageNotFound","PrivateRoute","component","isAuthenticated","rest","render","props","createElement","to","pathname","withUser","isLogged","Suspense","fallback","LoadingLazyPage","exact","path","App","UserProvider","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","UserContext","createContext","setIsLogged","status","state","setState","Provider","value","this","children","Component","Consumer","store"],"mappings":"oUAqBeA,G,YAhBC,WACd,OACE,0BAAMC,UAAU,uBACd,6BAASA,UAAU,UACjB,kBAAC,IAAD,CACEC,KAAK,UACLC,MAAM,2BACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,UCRbC,EAAQC,IAAMC,MAAK,kBAAM,uDACzBC,EAASF,IAAMC,MAAK,kBAAM,8DAC1BE,EAAYH,IAAMC,MAAK,kBAAM,8DAC7BG,EAAeJ,IAAMC,MAAK,kBAAM,uDAShCI,EAAe,SAAC,GAID,IAHnBC,EAGkB,EAHlBA,UACAC,EAEkB,EAFlBA,gBACGC,EACe,+CAOlB,OAAO,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OAND,SAACC,GAAD,OACrBH,EACEP,IAAMW,cAAcL,EAAWI,GAE/B,kBAAC,IAAD,CAAUE,GAAI,CAAEC,SAAU,YA8BjBC,eArBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,kBAAC,IAAMC,SAAP,CAAgBC,SAAUC,KACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAId,UAAWP,IACjC,kBAAC,EAAD,CACEoB,OAAK,EACLC,KAAK,aACLd,UAAWH,EACXI,gBAAiBQ,IAEnB,kBAAC,EAAD,CACEI,OAAK,EACLC,KAAK,UACLd,UAAWJ,EACXK,gBAAiBQ,IAEnB,kBAAC,IAAD,CAAOT,UAAWF,SCpCTiB,G,MAVH,WACV,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,UCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASnB,OAAO,kBAAC,EAAD,MAASoB,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,uJE/IfC,EAAcC,wBAAc,CACvC3B,UAAU,EACV4B,YAAa,SAACC,OAUVtB,E,4MACJuB,MAAQ,CACN9B,UAAU,EACV4B,YAAa,SAACC,GAAD,OAAqB,EAAKE,SAAS,CAAC/B,SAAU6B,M,uDAI3D,OACE,kBAACH,EAAYM,SAAb,CAAsBC,MAAOC,KAAKJ,OAC/BI,KAAKvC,MAAMwC,c,GATOC,aAedrC,EAAW,SAACqC,GAAD,OAAoB,SAACzC,GAAD,OAC1C,kBAAC+B,EAAYW,SAAb,MACG,SAAAC,GAAK,OAAI,kBAACF,EAAD,iBAAezC,EAAW2C,SAIzB/B,Q","file":"static/js/main.b709a9ae.chunk.js","sourcesContent":["import React from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport \"./loader.scss\";\n\nconst Loading = () => {\n  return (\n    <main className=\"loader-wrapper page\">\n      <section className=\"loader\">\n        <Loader\n          type=\"Circles\"\n          color=\"rgba(137, 194, 217, 0.3)\"\n          height={100}\n          width={100}\n          timeout={3000}\n        />\n      </section>\n    </main>\n  );\n};\n\nexport default Loading;\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport { withUser } from \"../store/UserProvider\";\n\nimport LoadingLazyPage from \"../SharedComponents/Loading/LoadingLazyPage\";\n\nconst Login = React.lazy(() => import(\"../Screens/Login\"));\nconst Family = React.lazy(() => import(\"../Screens/Family\"));\nconst Dashboard = React.lazy(() => import(\"../Screens/Dashboard\"));\nconst PageNotFound = React.lazy(() => import(\"../Screens/NotFound\"));\n\ntype PRoutesProps = {\n  exact: boolean;\n  path: string;\n  component: React.FC;\n  isAuthenticated: boolean;\n};\n\nconst PrivateRoute = ({\n  component,\n  isAuthenticated,\n  ...rest\n}: PRoutesProps) => {\n  const routeComponent = (props: any) =>\n    isAuthenticated ? (\n      React.createElement(component, props)\n    ) : (\n      <Redirect to={{ pathname: \"/\" }} />\n    );\n  return <Route {...rest} render={routeComponent} />;\n};\n\ntype RoutesProps = {\n  isLogged: boolean;\n};\n\nconst Routes = ({ isLogged }: RoutesProps) => (\n  <React.Suspense fallback={LoadingLazyPage()}>\n    <Switch>\n      <Route exact path=\"/\" component={Login} />\n      <PrivateRoute\n        exact\n        path=\"/dashboard\"\n        component={Dashboard}\n        isAuthenticated={isLogged}\n      />\n      <PrivateRoute\n        exact\n        path=\"/family\"\n        component={Family}\n        isAuthenticated={isLogged}\n      />\n      <Route component={PageNotFound} />\n    </Switch>\n  </React.Suspense>\n);\n\nexport default withUser(Routes);\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Routes from \"./core/Routes\";\nimport UserProvider from \"./store/UserProvider\";\nimport \"./App.scss\";\n\nconst App = () => {\n  return (\n    <UserProvider>\n      <Router>\n        <Routes />\n      </Router>\n    </UserProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { createContext, Component } from \"react\";\n\nexport const UserContext = createContext({\n  isLogged: false,\n  setIsLogged: (status: boolean) => {},\n});\n\ntype Props = {}\n\ntype State = {\n  isLogged: boolean,\n  setIsLogged: Function\n}\n\nclass UserProvider extends Component<Props, State> {\n  state = {\n    isLogged: false, \n    setIsLogged: (status: boolean) => this.setState({isLogged: status})\n  };\n\n  render() {\n    return (\n      <UserContext.Provider value={this.state}>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\n\nexport const withUser = (Component: any) => (props: any) => (\n  <UserContext.Consumer>\n    {store => <Component {...props} {...store} />}\n  </UserContext.Consumer>\n)\n\nexport default UserProvider;\n"],"sourceRoot":""}